def function(*arg):
	return sum(arg)

function(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)

class Calc(object):
	def __init__(self, value):
		print('Calc constructor is called')
		self.value = value

	def count(self):
		return self.value * 8 + 9

c = Calc(1.4)
print(c.count())

class ExtendedCalc(Calc):
	def __init__(self, value, k=1):
		super().__init__(value)
		print('Extender', self.value)

		self.k = k

	def count(self):
		a = self.k + 1
		previous = super().count()
		#commit
		return -1 * self.k * previous

e = ExtendedCalc(8, k=1.2)
print(e.count())

class Test(object):
	def __add__(self, other):
		return ('0_0')

t = Test()

print(t + 2)

class BadStr(str):
	def __add__(self, other):
		return str(self) = str(other)

t = BadStr('some')

print(t + 2)

class MathObject(object):
	def __init__(self, value):
		self.value = value

	def __eq__(self, other):
		return self.value == other

	def __ge(self, value):
		return self.value >= other

	def __gt__(self, value):
		return self.value > other

	def __lt__(self, other):
		return self.value < other

	def __neg__(self):
		return -self.value
		
    def __add__(self, other):
        return self.value + other

    def __radd__(self, other):
        return self.__add__(other)

    def __iadd__(self, other):
        return self.__add__(other)

    def __mul__(self, other):
        return self.value * other

class MathObject(object):
	def __init__(self):
		self.value = 2

	def __add__(self, other):
		return self.value + other

t = MathObject()

print(t + 4)
print(t.__add__(4))

class DictFunctionaLity(object):
	def __init__(self, values=None):
		if values is None:
			self.values {}
		elif isinstance(values, dict):
			self.values = values
		else:
			raise ValueError()

	def __str__(self):
        return str(self.values) if self.values else ''

    def __getitem__(self, key):
        return self.values[key]

    def __setitem__(self, key, value):
        self.values[key] = value

    def __delitem__(self, key):
        del self.values[key]

    def __iter__(self):
        return iter(self.values)

    def __contains__(self, item):
        return item in self.values

    def __len__(self):
        return len(self.values)


if __name__ == '__main__':
    l = DictFunctionality({'1key': 'some_value'})
    l[1] = 'item1'
    print(str(l), l[1])

    for item in l:
        print(item, l[item])

    print('s' in l, 1 in l)
    print(len(l))

class MathObject(object):
	value = 4

MathObject.value = 4
t = MathObject()
t1 = MathObject()
print(t.value, t.__class__.value)
print(t1.value, t1.__class__.value)

t.value = 12
print(t.value, t.__class__.value)
print(t1.value, t1.__class__.value)

MathObject.value = 5
print(t.value, t.__class__.value)
print(t1.value, t1.__class__.value)

class MathObject(object):
	value = 24

	def __init__(self, i):
		self.value = i

t = MathObject(10)
print(t.value, t.__class__.value)
# Переиспользование переменных как в классе так и в его методах...

class DemoClass(object):
	class_value = 'i belong to the CLASS'

	def __init__(self, inst_value):
		self.inst_value = inst_value
		

d = DemoClass('abc')
d1 = DemoClass('zzz')

d1.inst_value = 'xxx'
d1.class_value = 'yyy'
print(d.inst_value, d1.inst_value)
print(d.class_value, d1.class_value)

DemoClass.class_value = 'i am shared between all inctances!'
print(d.class_value, d1.class_value)

	
def count():
		return 'some'

class MathObject(object):
	value = 2

	def __init__(self, i):
		self.i = i


t = MathObject(12)
print(MathObject.value)
print(MathObject.count())

import random
import sys

print(random.randint(0, 10))

print(sys.path)

from normal_package.normal_file import MyClass, my_function, GLOBAL_VAR

my_function()

try:
	form not_a_package.my_module import print_info
	# comments
	print_info()
except ImportError as e:
	print(e)

class MyClass:
	pass

def my_function():
	print('My function is working!')

GLOBAL_VAR = 12

print(__name__)

if __name__ == '__main__':
	my_function()
